<?xml version="1.0" encoding="UTF-8"?>
<!--
This file was generated by Altova MapForce 2019r3

YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.

Refer to the Altova MapForce Documentation for further details.
http://www.altova.com/mapforce
-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ns0="biotoolsSchema" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" exclude-result-prefixes="ns0 xs fn">
	<xsl:output method="xml" encoding="UTF-8" byte-order-mark="no" indent="yes"/>
	<xsl:template match="/">
		<root>
			<xsl:attribute name="xsi:noNamespaceSchemaLocation" namespace="http://www.w3.org/2001/XMLSchema-instance" select="'file:///E:/repos/GitHub/biotoolsShim/genericxml2xml-singletool/versions/biotools-3.3.0/biotools-3.3.0_framework_singletool.xsd'"/>
			<xsl:for-each select="ns0:tools/ns0:tool">
				<name>
					<xsl:sequence select="fn:string(ns0:name)"/>
				</name>
				<description>
					<xsl:sequence select="fn:string(ns0:description)"/>
				</description>
				<homepage>
					<xsl:sequence select="xs:string(xs:anyURI(fn:string(ns0:homepage)))"/>
				</homepage>
				<xsl:for-each select="ns0:biotoolsID">
					<biotoolsID>
						<xsl:sequence select="xs:string(xs:anyURI(fn:string(.)))"/>
					</biotoolsID>
				</xsl:for-each>
				<xsl:for-each select="ns0:biotoolsCURIE">
					<biotoolsCURIE>
						<xsl:sequence select="xs:string(xs:anyURI(fn:string(.)))"/>
					</biotoolsCURIE>
				</xsl:for-each>
				<version>
					<xsl:for-each select="ns0:version">
						<list-item>
							<xsl:sequence select="fn:string(.)"/>
						</list-item>
					</xsl:for-each>
				</version>
				<otherID>
					<xsl:for-each select="ns0:otherID">
						<list-item>
							<value>
								<xsl:sequence select="fn:string(ns0:value)"/>
							</value>
							<xsl:for-each select="ns0:type">
								<type>
									<xsl:sequence select="fn:string(.)"/>
								</type>
							</xsl:for-each>
							<xsl:for-each select="ns0:version">
								<version>
									<xsl:sequence select="fn:string(.)"/>
								</version>
							</xsl:for-each>
						</list-item>
					</xsl:for-each>
				</otherID>
				<function>
					<xsl:for-each select="ns0:function">
						<list-item>
							<operation>
								<xsl:for-each select="ns0:operation">
									<list-item>
										<xsl:for-each select="ns0:uri">
											<uri>
												<xsl:sequence select="xs:string(xs:anyURI(fn:string(.)))"/>
											</uri>
										</xsl:for-each>
										<xsl:for-each select="ns0:term">
											<term>
												<xsl:sequence select="fn:string(.)"/>
											</term>
										</xsl:for-each>
									</list-item>
								</xsl:for-each>
							</operation>
							<input>
								<xsl:for-each select="ns0:input">
									<list-item>
										<xsl:variable name="var1_data" as="node()" select="ns0:data"/>
										<data>
											<xsl:for-each select="$var1_data/ns0:uri">
												<uri>
													<xsl:sequence select="xs:string(xs:anyURI(fn:string(.)))"/>
												</uri>
											</xsl:for-each>
											<xsl:for-each select="$var1_data/ns0:term">
												<term>
													<xsl:sequence select="fn:string(.)"/>
												</term>
											</xsl:for-each>
										</data>
										<format>
											<xsl:for-each select="ns0:format">
												<list-item>
													<xsl:for-each select="ns0:uri">
														<uri>
															<xsl:sequence select="xs:string(xs:anyURI(fn:string(.)))"/>
														</uri>
													</xsl:for-each>
													<xsl:for-each select="ns0:term">
														<term>
															<xsl:sequence select="fn:string(.)"/>
														</term>
													</xsl:for-each>
												</list-item>
											</xsl:for-each>
										</format>
									</list-item>
								</xsl:for-each>
							</input>
							<output>
								<xsl:for-each select="ns0:output">
									<list-item>
										<xsl:variable name="var2_data" as="node()" select="ns0:data"/>
										<data>
											<xsl:for-each select="$var2_data/ns0:uri">
												<uri>
													<xsl:sequence select="xs:string(xs:anyURI(fn:string(.)))"/>
												</uri>
											</xsl:for-each>
											<xsl:for-each select="$var2_data/ns0:term">
												<term>
													<xsl:sequence select="fn:string(.)"/>
												</term>
											</xsl:for-each>
										</data>
										<format>
											<xsl:for-each select="ns0:format">
												<list-item>
													<xsl:for-each select="ns0:uri">
														<uri>
															<xsl:sequence select="xs:string(xs:anyURI(fn:string(.)))"/>
														</uri>
													</xsl:for-each>
													<xsl:for-each select="ns0:term">
														<term>
															<xsl:sequence select="fn:string(.)"/>
														</term>
													</xsl:for-each>
												</list-item>
											</xsl:for-each>
										</format>
									</list-item>
								</xsl:for-each>
							</output>
							<xsl:for-each select="ns0:note">
								<note>
									<xsl:sequence select="fn:string(.)"/>
								</note>
							</xsl:for-each>
							<xsl:for-each select="ns0:cmd">
								<cmd>
									<xsl:sequence select="fn:string(.)"/>
								</cmd>
							</xsl:for-each>
						</list-item>
					</xsl:for-each>
				</function>
				<toolType>
					<xsl:for-each select="ns0:toolType">
						<list-item>
							<xsl:sequence select="fn:string(.)"/>
						</list-item>
					</xsl:for-each>
				</toolType>
				<topic>
					<xsl:for-each select="ns0:topic">
						<list-item>
							<xsl:for-each select="ns0:uri">
								<uri>
									<xsl:sequence select="xs:string(xs:anyURI(fn:string(.)))"/>
								</uri>
							</xsl:for-each>
							<xsl:for-each select="ns0:term">
								<term>
									<xsl:sequence select="fn:string(.)"/>
								</term>
							</xsl:for-each>
						</list-item>
					</xsl:for-each>
				</topic>
				<operatingSystem>
					<xsl:for-each select="ns0:operatingSystem">
						<list-item>
							<xsl:sequence select="fn:string(.)"/>
						</list-item>
					</xsl:for-each>
				</operatingSystem>
				<language>
					<xsl:for-each select="ns0:language">
						<list-item>
							<xsl:sequence select="fn:string(.)"/>
						</list-item>
					</xsl:for-each>
				</language>
				<xsl:for-each select="ns0:license">
					<license>
						<xsl:sequence select="fn:string(.)"/>
					</license>
				</xsl:for-each>
				<collectionID>
					<xsl:for-each select="ns0:collectionID">
						<list-item>
							<xsl:sequence select="fn:string(.)"/>
						</list-item>
					</xsl:for-each>
				</collectionID>
				<xsl:for-each select="ns0:maturity">
					<maturity>
						<xsl:sequence select="fn:string(.)"/>
					</maturity>
				</xsl:for-each>
				<xsl:for-each select="ns0:cost">
					<cost>
						<xsl:sequence select="fn:string(.)"/>
					</cost>
				</xsl:for-each>
				<xsl:for-each select="ns0:accessibility">
					<accessibility>
						<xsl:sequence select="fn:string(.)"/>
					</accessibility>
				</xsl:for-each>
				<elixirPlatform>
					<xsl:for-each select="ns0:elixirPlatform">
						<list-item>
							<xsl:sequence select="fn:string(.)"/>
						</list-item>
					</xsl:for-each>
				</elixirPlatform>
				<elixirCommunity>
					<xsl:for-each select="ns0:elixirCommunity">
						<list-item>
							<xsl:sequence select="fn:string(.)"/>
						</list-item>
					</xsl:for-each>
				</elixirCommunity>
				<elixirNode>
					<xsl:for-each select="ns0:elixirNode">
						<list-item>
							<xsl:sequence select="fn:string(.)"/>
						</list-item>
					</xsl:for-each>
				</elixirNode>
				<link>
					<xsl:for-each select="ns0:link">
						<list-item>
							<url>
								<xsl:sequence select="xs:string(xs:anyURI(fn:string(ns0:url)))"/>
							</url>
							<xsl:for-each select="ns0:type">
								<type>
									<xsl:sequence select="fn:string(.)"/>
								</type>
							</xsl:for-each>
							<xsl:for-each select="ns0:note">
								<note>
									<xsl:sequence select="fn:string(.)"/>
								</note>
							</xsl:for-each>
						</list-item>
					</xsl:for-each>
				</link>
				<download>
					<xsl:for-each select="ns0:download">
						<list-item>
							<url>
								<xsl:sequence select="xs:string(xs:anyURI(fn:string(ns0:url)))"/>
							</url>
							<type>
								<xsl:sequence select="fn:string(ns0:type)"/>
							</type>
							<xsl:for-each select="ns0:note">
								<note>
									<xsl:sequence select="fn:string(.)"/>
								</note>
							</xsl:for-each>
							<xsl:for-each select="ns0:version">
								<version>
									<xsl:sequence select="fn:string(.)"/>
								</version>
							</xsl:for-each>
						</list-item>
					</xsl:for-each>
				</download>
				<documentation>
					<xsl:for-each select="ns0:documentation">
						<list-item>
							<url>
								<xsl:sequence select="xs:string(xs:anyURI(fn:string(ns0:url)))"/>
							</url>
							<xsl:for-each select="ns0:type">
								<type>
									<xsl:sequence select="fn:string(.)"/>
								</type>
							</xsl:for-each>
							<xsl:for-each select="ns0:note">
								<note>
									<xsl:sequence select="fn:string(.)"/>
								</note>
							</xsl:for-each>
						</list-item>
					</xsl:for-each>
				</documentation>
				<relation>
					<xsl:for-each select="ns0:relation">
						<list-item>
							<biotoolsID>
								<xsl:sequence select="xs:string(xs:anyURI(fn:string(ns0:biotoolsID)))"/>
							</biotoolsID>
							<type>
								<xsl:sequence select="fn:string(ns0:type)"/>
							</type>
						</list-item>
					</xsl:for-each>
				</relation>
				<publication>
					<xsl:for-each select="ns0:publication">
						<list-item>
							<xsl:for-each select="ns0:doi">
								<doi>
									<xsl:sequence select="fn:string(.)"/>
								</doi>
							</xsl:for-each>
							<xsl:for-each select="ns0:pmid">
								<pmid>
									<xsl:sequence select="fn:string(.)"/>
								</pmid>
							</xsl:for-each>
							<xsl:for-each select="ns0:pmcid">
								<pmcid>
									<xsl:sequence select="fn:string(.)"/>
								</pmcid>
							</xsl:for-each>
							<xsl:for-each select="ns0:type">
								<type>
									<xsl:sequence select="fn:string(.)"/>
								</type>
							</xsl:for-each>
							<xsl:for-each select="ns0:version">
								<version>
									<xsl:sequence select="fn:string(.)"/>
								</version>
							</xsl:for-each>
							<xsl:for-each select="ns0:note">
								<note>
									<xsl:sequence select="fn:string(.)"/>
								</note>
							</xsl:for-each>
						</list-item>
					</xsl:for-each>
				</publication>
				<credit>
					<xsl:for-each select="ns0:credit">
						<list-item>
							<xsl:for-each select="ns0:name">
								<name>
									<xsl:sequence select="fn:string(.)"/>
								</name>
							</xsl:for-each>
							<xsl:for-each select="ns0:email">
								<email>
									<xsl:sequence select="fn:string(.)"/>
								</email>
							</xsl:for-each>
							<xsl:for-each select="ns0:url">
								<url>
									<xsl:sequence select="xs:string(xs:anyURI(fn:string(.)))"/>
								</url>
							</xsl:for-each>
							<xsl:for-each select="ns0:orcidid">
								<orcidid>
									<xsl:sequence select="fn:string(.)"/>
								</orcidid>
							</xsl:for-each>
							<xsl:for-each select="ns0:gridid">
								<gridid>
									<xsl:sequence select="fn:string(.)"/>
								</gridid>
							</xsl:for-each>
							<xsl:for-each select="ns0:rorid">
								<rorid>
									<xsl:sequence select="fn:string(.)"/>
								</rorid>
							</xsl:for-each>
							<xsl:for-each select="ns0:fundrefid">
								<fundrefid>
									<xsl:sequence select="fn:string(.)"/>
								</fundrefid>
							</xsl:for-each>
							<xsl:for-each select="ns0:typeEntity">
								<typeEntity>
									<xsl:sequence select="fn:string(.)"/>
								</typeEntity>
							</xsl:for-each>
							<typeRole>
								<xsl:for-each select="ns0:typeRole">
									<list-item>
										<xsl:sequence select="fn:string(.)"/>
									</list-item>
								</xsl:for-each>
							</typeRole>
							<xsl:for-each select="ns0:note">
								<note>
									<xsl:sequence select="fn:string(.)"/>
								</note>
							</xsl:for-each>
						</list-item>
					</xsl:for-each>
				</credit>
			</xsl:for-each>
		</root>
	</xsl:template>
</xsl:stylesheet>
